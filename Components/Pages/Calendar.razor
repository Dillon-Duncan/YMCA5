@page "/calendar"
@using YMCA3.YmcaApiClient.Models.ApiModels
@using YmcaApiClient
@inject YmcaApiClientService ApiClientService
@using Microsoft.Extensions.Logging
@inject ILogger<Calendar> Logger

<div class="content px-4 d-flex flex-column justify-content-center align-items-center" style="height: 80vh; margin-bottom: 25px;">

    <div class="d-flex justify-content-center align-items-center mb-3">
        <button class="btn btn-outline-primary me-2" style="background-color: #EC1F26; border-color: #EC1F26; min-width: 40vw;" @onclick="PreviousTwoMonths">Previous</button>
        <button class="btn btn-outline-primary ms-2" style="background-color: #EC1F26; border-color: #EC1F26; min-width: 40vw;" @onclick="NextTwoMonths">Next</button>
    </div>

    <div class="d-flex justify-content-center flex-column mb-4" style="max-width: 100%; max-height: 100%; overflow-x: auto; overflow-y: auto;">
        <!-- Display two months: one on top of the other -->
        @foreach (var monthOffset in new[] { 0, 1 })
        {
            var monthToDisplay = currentMonth.AddMonths(monthOffset);
            <div class="table-responsive me-4 mb-4" style="overflow-x: auto; overflow-y: hidden;">
                <h5 class="text-center" style="color: white;">@monthToDisplay.ToString("MMMM yyyy")</h5>
                <table class="table table-bordered text-center">
                    <thead>
                        <tr>
                            @foreach (var day in Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>())
                            {
                                <th style="font-size: 0.5rem; background-color: white; color: black;">@day.ToString().Substring(0, 3)</th> <!-- Show short names (Mon, Tue, Wed...) -->
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var week in GetWeeksInMonth(monthToDisplay))
                        {
                            <tr>
                                @foreach (var day in week)
                                {
                                    <td class="align-middle" style="vertical-align: top; background-color: white;">
                                        @if (day != null)
                                        {
                                            @if (GetEventsForDay(day.Value).Any())
                                            {
                                                <!-- Days with events: Event title in red text or on a red background with white text -->
                                                <!-- Display event titles -->
                                                <ul class="list-unstyled" style="margin-bottom: 0;">
                                                    @foreach (var eventItem in GetEventsForDay(day.Value).Take(2))
                                                    {
                                                        <li class="text-white" style="font-size: 0.3rem; background-color: #EC1F26; border-radius: 1px; padding: 2px; margin: 0.5px;">
                                                            @eventItem.Title
                                                        </li> <!-- Event titles in white on a red background -->
                                                    }
                                                </ul>
                                                @if (GetEventsForDay(day.Value).Count() > 2)
                                                {
                                                    <small class="text-muted">+ more</small> <!-- Indicate more events -->
                                                }
                                            }
                                            else
                                            {
                                                <!-- Days without events: Black text and regular day number -->
                                                <div class="day-number" style="font-size: 0.5rem; color: black;">@day.Value.Day</div>
                                            }
                                        }
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    private DateTime currentMonth = DateTime.Now;
    private List<Event> events = new();
    private string _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            var result = await ApiClientService.GetEvents();
            if (result != null)
            {
                events = result;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An error occurred while loading events");
            _errorMessage = "An error occurred while loading events.";
        }
    }

    private void PreviousTwoMonths()
    {
        currentMonth = currentMonth.AddMonths(-2);
    }

    private void NextTwoMonths()
    {
        currentMonth = currentMonth.AddMonths(2);
    }

    private List<DateTime?>[] GetWeeksInMonth(DateTime month)
    {
        var weeks = new List<DateTime?>[6];
        for (int i = 0; i < 6; i++)
        {
            weeks[i] = new List<DateTime?>(); // Initialize each week's list
        }

        var firstDayOfMonth = new DateTime(month.Year, month.Month, 1);
        var daysInMonth = DateTime.DaysInMonth(month.Year, month.Month);
        var startDayOfWeek = (int)firstDayOfMonth.DayOfWeek;

        int currentDay = 1;
        for (int i = 0; i < 6; i++)
        {
            for (int j = 0; j < 7; j++)
            {
                if (i == 0 && j < startDayOfWeek || currentDay > daysInMonth)
                {
                    weeks[i].Add(null); // Empty cells
                }
                else
                {
                    weeks[i].Add(new DateTime(month.Year, month.Month, currentDay));
                    currentDay++;
                }
            }
        }

        return weeks;
    }

    private IEnumerable<Event> GetEventsForDay(DateTime day)
    {
        return events.Where(e => e.Date.Date == day.Date);
    }
}
