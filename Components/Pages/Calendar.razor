@page "/calendar"
@using YMCA3.YmcaApiClient.Models.ApiModels
@using YmcaApiClient
@inject YmcaApiClientService ApiClientService
@using Microsoft.Extensions.Logging
@inject ILogger<Calendar> Logger

<div class="content px-4 d-flex flex-column justify-content-center align-items-center" style="height: 100vh; margin-bottom: 25px;">

    <div class="text-center mb-4">
        <h2>Calendar</h2>
    </div>

    <div class="d-flex justify-content-center align-items-center mb-3">
        <button class="btn btn-outline-primary me-2" style="background-color: #EC1F26; border-color: #EC1F26;" @onclick="PreviousMonth">Previous</button>
        <h4 class="mb-0">@currentMonth.ToString("MMMM yyyy")</h4>
        <button class="btn btn-outline-primary ms-2" style="background-color: #EC1F26; border-color: #EC1F26;" @onclick="NextMonth">Next</button>
    </div>

    <div class="d-flex justify-content-center mb-4">
        <div class="table-responsive me-4" style="max-width: 80%;">
            <table class="table table-bordered text-center">
                <thead>
                    <tr>
                        @foreach (var day in Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>())
                        {
                            <th>@day</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var week in GetWeeksInMonth())
                    {
                        <tr>
                            @foreach (var day in week)
                            {
                                <td class="align-middle">
                                    @if (day != null)
                                    {
                                        <div class="day-number">@day.Value.Day</div>
                                        <ul class="list-unstyled">
                                            @foreach (var eventItem in GetEventsForDay(day.Value))
                                            {
                                                <li class="text-small text-primary">@eventItem.Title</li>
                                            }
                                        </ul>
                                    }
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private DateTime currentMonth = DateTime.Now;
    private DateTime newEventDate;
    private string newEventTitle;
    private List<Event> events = new();
    private string _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            var result = await ApiClientService.GetEvents();
            if (result != null)
            {
                events = result;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An error occurred while loading events");
            _errorMessage = "An error occurred while loading events.";
        }
    }

    private void PreviousMonth()
    {
        currentMonth = currentMonth.AddMonths(-1);
    }

    private void NextMonth()
    {
        currentMonth = currentMonth.AddMonths(1);
    }

    private List<DateTime?>[] GetWeeksInMonth()
    {
        var weeks = new List<DateTime?>[6];
        for (int i = 0; i < 6; i++)
        {
            weeks[i] = new List<DateTime?>();
        }

        var firstDayOfMonth = new DateTime(currentMonth.Year, currentMonth.Month, 1);
        var daysInMonth = DateTime.DaysInMonth(currentMonth.Year, currentMonth.Month);
        var startDayOfWeek = (int)firstDayOfMonth.DayOfWeek;

        int currentDay = 1;
        for (int i = 0; i < 6; i++)
        {
            for (int j = 0; j < 7; j++)
            {
                if (i == 0 && j < startDayOfWeek || currentDay > daysInMonth)
                {
                    weeks[i].Add(null);
                }
                else
                {
                    weeks[i].Add(new DateTime(currentMonth.Year, currentMonth.Month, currentDay));
                    currentDay++;
                }
            }
        }

        return weeks;
    }

    private IEnumerable<Event> GetEventsForDay(DateTime day)
    {
        return events.Where(e => e.Date.Date == day.Date);
    }

    private async Task AddEvent()
    {
        if (!string.IsNullOrWhiteSpace(newEventTitle) && newEventDate != default)
        {
            var newEvent = new Event
            {
                Date = newEventDate,
                Title = newEventTitle
            };

            try
            {
                await ApiClientService.AddEvent(newEvent);
                events.Add(newEvent);
                newEventDate = default;
                newEventTitle = string.Empty;
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "An error occurred while adding the event");
                _errorMessage = "An error occurred while adding the event.";
            }
        }
    }
}