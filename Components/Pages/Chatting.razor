@page "/chatting"
@using YMCA3.Models
@using YmcaApiClient
@using YMCA3.YmcaApiClient.Models.ApiModels
@inject YmcaApiClientService ApiClientService
@using Microsoft.Extensions.Logging
@inject ILogger<Chatting> Logger
@inject NavigationManager NavigationManager
@inject UserStateService UserStateService

<div class="content px-4 d-flex flex-column justify-content-center align-items-center" style="height: 80vh; margin-bottom: 25px;">
    <div class="text-center mb-4">
        <h2>Chat</h2>
    </div>
    <div class="chat-content border p-3 rounded mb-3" style="min-width: 400px; flex-grow: 1; overflow-y: auto;">
        @if (chatMessages.Any())
        {
            @foreach (var chatMessage in chatMessages)
            {
                <div class="d-flex mb-2 @(chatMessage.FromUser == LoggedInUser.Username ? "justify-content-end" : "justify-content-start")">
                    <div class="p-2 rounded @(chatMessage.FromUser == LoggedInUser.Username ? "bg-primary text-white" : "bg-light text-dark")" style="max-width: 70%;">
                        <p class="mb-1">@chatMessage.Text</p>
                        <small class="text-muted">@chatMessage.Date.ToString("HH:mm")</small>
                    </div>
                </div>
            }
        }
        else
        {
            <p>No messages to display.</p>
        }
    </div>
    <div class="chat-input d-flex">
        <input @bind="newMessage" @bind:event="oninput" type="text" class="form-control me-2" placeholder="Type a message..." />
        <button class="btn btn-primary" style="background-color: #EC1F26; border-color: #EC1F26;" @onclick="SendMessage">Send</button>
    </div>
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger mt-3">@_errorMessage</div>
    }
</div>

@code {
    private string newMessage = string.Empty; // Holds the message text being composed.
    private List<Message> chatMessages = new(); // List of messages related to the logged-in user.
    private string _errorMessage; // Stores error messages to display in the UI.
    private LoggedUser LoggedInUser => UserStateService.LoggedUser; // Reference to the globally logged-in user.

    protected override async Task OnInitializedAsync()
    {
        if (LoggedInUser == null)
        {
            NavigationManager.NavigateTo("/login"); // Redirect if the user isn't logged in.
            return;
        }

        await LoadChatMessages();
    }

    private async Task LoadChatMessages()
    {
        try
        {
            var messages = await ApiClientService.GetMessages();
            if (messages != null)
            {
                // Filter messages where the logged-in user is either the sender or the recipient
                chatMessages = messages
                    .Where(m => m.FromUser == LoggedInUser.Username || m.ToUser == LoggedInUser.Username)
                    .OrderBy(m => m.Date)
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An error occurred while loading chat messages.");
            _errorMessage = "An error occurred while loading messages.";
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(newMessage))
        {
            var newChatMessage = new Message
                {
                    FromUser = LoggedInUser.Username, // Sender is the logged-in user.
                    ToUser = "janedoe", 
                    Text = newMessage,
                    Date = DateTime.Now
                };

            try
            {
                await ApiClientService.AddMessage(newChatMessage); // Sends the message to the server.
                chatMessages.Add(newChatMessage); // Adds the message locally for immediate display.
                newMessage = string.Empty; // Clears the input field.
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "An error occurred while sending the message.");
                _errorMessage = "An error occurred while sending the message.";
            }
        }
    }
}
